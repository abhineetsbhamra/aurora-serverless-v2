"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonServiceDef = void 0;
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const wesdigital_1 = require("../wesdigital");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const kms_1 = require("../kms");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const lambda_1 = require("../lambda");
const aws_logs_destinations_1 = require("aws-cdk-lib/aws-logs-destinations");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const aws_ecs_patterns_1 = require("aws-cdk-lib/aws-ecs-patterns");
class CommonServiceDef extends constructs_1.Construct {
    constructor(scope, id, taskDefProps) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        super(scope, id);
        const props = taskDefProps.fargate;
        const accountNumber = aws_cdk_lib_1.Stack.of(this).account;
        const envProps = {
            account: accountNumber,
            env: props.deploymentEnv
        };
        const env = (0, wesdigital_1.wesDigitalEnv)(envProps);
        const namePrefix = `${props.identifier}${props.deploymentEnv}-${props.imageName}`;
        const clusterName = props.clusterName;
        const taskDef = new aws_ecs_1.FargateTaskDefinition(this, 'TaskDef', {
            cpu: props.taskDefinitionCpu,
            memoryLimitMiB: props.taskDefinitionMemory,
            volumes: props.volumes
        });
        const serviceKmsKey = new kms_1.StandardKMSKey(this, 'MainLogGroupKey', {
            keyName: `${props.identifier}-${props.imageName}-logs_key`,
            deploymentEnv: props.deploymentEnv
        });
        const logGroupName = `/ecs/${namePrefix}`;
        serviceKmsKey.addCloudwatchLogs([logGroupName]);
        this._kmsKey = serviceKmsKey.key;
        const mainLogGroup = new aws_logs_1.LogGroup(this, 'MainLogGroup', {
            logGroupName,
            retention: props.logRetentionInDays,
            encryptionKey: serviceKmsKey.key
        });
        const logLambda = (0, lambda_1.createLogLambda)(this, 'DatadogLambda');
        mainLogGroup.addSubscriptionFilter('DataDogSubscription', {
            destination: new aws_logs_destinations_1.LambdaDestination(logLambda),
            filterPattern: aws_logs_1.FilterPattern.allEvents()
        });
        const mainContainerName = props.containerName;
        const mainContainerSecrets = (_a = props.taskSecrets) === null || _a === void 0 ? void 0 : _a.externalSecretConfig.reduce((obj, secret) => {
            return {
                ...obj,
                [secret.envVar]: aws_ecs_1.Secret.fromSecretsManager(aws_secretsmanager_1.Secret.fromSecretNameV2(this, `SecretsManager${secret.lastPartOfSecretName}`, `/${props.identifier}${props.deploymentEnv}/${props.imageName}/${secret.lastPartOfSecretName}`))
            };
        }, (_b = props.taskSecrets) === null || _b === void 0 ? void 0 : _b.localSecrets);
        const mainContainerDef = taskDef.addContainer('MainContainer', {
            containerName: mainContainerName,
            image: aws_ecs_1.ContainerImage.fromEcrRepository(aws_ecr_1.Repository.fromRepositoryAttributes(this, 'MainRepository', {
                repositoryArn: aws_ecr_1.Repository.arnForLocalRepository(props.imageName, this, env.ecrAccount),
                repositoryName: props.imageName
            }), props.imageTag),
            portMappings: [{
                    containerPort: props.containerPort
                }],
            logging: aws_ecs_1.LogDriver.awsLogs({
                logGroup: mainLogGroup,
                streamPrefix: 'container'
            }),
            linuxParameters: new aws_ecs_1.LinuxParameters(this, 'MainContainerLinuxParameters', {
                initProcessEnabled: true
            }),
            secrets: mainContainerSecrets,
            environment: (_c = props.envVars) === null || _c === void 0 ? void 0 : _c.task,
            healthCheck: props.taskHealthCheck
        });
        if (props.taskMountPoints) {
            mainContainerDef.addMountPoints(...props.taskMountPoints);
        }
        const reverseDomainName = (domainName) => domainName.split('.').reverse().join('.');
        const datadogSecret = aws_secretsmanager_1.Secret.fromSecretNameV2(this, 'DatadogSecret', `/${props.deploymentEnv}/platform/datadog_ecs`);
        const datadogContainerDef = taskDef.addContainer('DatadogContainer', {
            containerName: `datadog-agent-${mainContainerName}`,
            image: aws_ecs_1.ContainerImage.fromEcrRepository(aws_ecr_1.Repository.fromRepositoryAttributes(this, 'DatadogRepository', {
                repositoryArn: aws_ecr_1.Repository.arnForLocalRepository(wesdigital_1.DatadogImage, this, env.ecrAccount),
                repositoryName: wesdigital_1.DatadogImage
            }), wesdigital_1.DatadogImageTag),
            logging: aws_ecs_1.LogDriver.awsLogs({
                logGroup: mainLogGroup,
                streamPrefix: 'datadog'
            }),
            portMappings: [
                {
                    containerPort: 8125,
                    hostPort: 8125,
                    protocol: aws_ecs_1.Protocol.UDP
                },
                {
                    hostPort: 8126,
                    containerPort: 8126,
                    protocol: aws_ecs_1.Protocol.TCP
                }
            ],
            secrets: {
                DD_API_KEY: aws_ecs_1.Secret.fromSecretsManager(datadogSecret)
            },
            environment: {
                ...(_d = props.envVars) === null || _d === void 0 ? void 0 : _d.dataDog,
                DD_APM_ENABLED: 'true',
                DD_APM_NON_LOCAL_TRAFFIC: 'true',
                DD_APM_RECEIVER_PORT: '8126',
                DD_DOCKER_LABELS_AS_TAGS: `{"${reverseDomainName(env.internalLb)}.alb.${props.imageName}.service_name":"service_name","${reverseDomainName(env.internalLb)}.alb.${props.imageName}.github_tag":"github_tag"}`,
                DD_DOGSTATSD_NON_LOCAL_TRAFFIC: 'true',
                DD_DOGSTATSD_PORT: '8125',
                DD_LOGS_ENABLED: 'true',
                DD_SITE: 'datadoghq.com',
                DD_TAGS: (0, wesdigital_1.getDataDogTags)({ ...props.ddTagsConfig, env: props.deploymentEnv }, { cluster: clusterName }),
                ECS_FARGATE: 'true'
            },
            healthCheck: {
                command: ['CMD-SHELL', 'agent health || exit 1']
            }
        });
        mainContainerDef.addContainerDependencies({
            container: datadogContainerDef,
            condition: aws_ecs_1.ContainerDependencyCondition.HEALTHY
        });
        const baseServiceCreationProps = {
            assignPublicIp: false,
            taskDefinition: taskDef,
            cluster: aws_ecs_1.Cluster.fromClusterAttributes(this, 'Cluster', {
                clusterName: props.clusterName,
                vpc: (0, wesdigital_1.wesDigitalVpc)(this, 'vpc', envProps),
                securityGroups: []
            }),
            serviceName: `${props.identifier}${props.deploymentEnv}-${props.imageName}`
        };
        const ServiceClass = taskDefProps.serviceType;
        const serviceCreationProps = ServiceClass === aws_ecs_patterns_1.ApplicationLoadBalancedFargateService
            ? { ...baseServiceCreationProps, publicLoadBalancer: false }
            : { ...baseServiceCreationProps };
        const fargateService = new ServiceClass(this, 'Service', serviceCreationProps);
        const scaleProps = {
            maxCapacity: (_f = (_e = props.autoscaling) === null || _e === void 0 ? void 0 : _e.max) !== null && _f !== void 0 ? _f : 3,
            minCapacity: (_h = (_g = props.autoscaling) === null || _g === void 0 ? void 0 : _g.min) !== null && _h !== void 0 ? _h : 1
        };
        const scaling = fargateService instanceof aws_ecs_1.FargateService ? fargateService.autoScaleTaskCount(scaleProps) : fargateService.service.autoScaleTaskCount(scaleProps);
        switch ((_j = props.autoscaling) === null || _j === void 0 ? void 0 : _j.metric) {
            case 'CPU':
                scaling.scaleOnCpuUtilization('CPUScaling', {
                    scaleInCooldown: props.autoscaling.scaleInCooldown,
                    scaleOutCooldown: props.autoscaling.scaleOutCooldown,
                    targetUtilizationPercent: props.autoscaling.targetValue
                });
                break;
            case 'Memory':
                scaling.scaleOnMemoryUtilization('MemoryScaling', {
                    scaleInCooldown: props.autoscaling.scaleInCooldown,
                    scaleOutCooldown: props.autoscaling.scaleOutCooldown,
                    targetUtilizationPercent: props.autoscaling.targetValue
                });
                break;
            default:
                scaling.scaleOnCpuUtilization('CPUScaling', {
                    scaleInCooldown: aws_cdk_lib_1.Duration.minutes(5),
                    scaleOutCooldown: aws_cdk_lib_1.Duration.minutes(1),
                    targetUtilizationPercent: 80
                });
                break;
        }
        const ddSecretPolicy = new aws_iam_1.PolicyStatement({
            actions: ['secretsmanager:GetSecretValue'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [datadogSecret.secretArn],
            sid: 'datadogsecret'
        });
        fargateService.taskDefinition.addToTaskRolePolicy(ddSecretPolicy);
        const ddKmsPolicy = new aws_iam_1.PolicyStatement({
            actions: [
                'kms:Decrypt',
                'kms:DescribeKey',
                'kms:GenerateDataKey'
            ],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [aws_ssm_1.StringParameter.valueForStringParameter(this, `/${props.deploymentEnv}/${props.clusterName}/ECS/${props.clusterName}`)],
            sid: 'clusterkmskey'
        });
        fargateService.taskDefinition.addToExecutionRolePolicy(ddKmsPolicy);
        fargateService.taskDefinition.addToTaskRolePolicy(ddKmsPolicy);
        if (props.msk) {
            const mskClusterPolicy = new aws_iam_1.PolicyStatement({
                actions: ['kafka-cluster:Connect'],
                effect: aws_iam_1.Effect.ALLOW,
                resources: [env.mskClusterArn],
                sid: 'klusterconnect'
            });
            fargateService.taskDefinition.addToTaskRolePolicy(mskClusterPolicy);
            if (props.msk.consumerTopics.length > 0) {
                const mskConsumerTopicPolicy = new aws_iam_1.PolicyStatement({
                    actions: [
                        'kafka-cluster:DescribeTopic',
                        'kafka-cluster:ReadData'
                    ],
                    effect: aws_iam_1.Effect.ALLOW,
                    resources: props.msk.consumerTopics.map(topic => `${env.mskClusterArn.replace('cluster', 'topic')}/${topic}`),
                    sid: 'mskconsumertopics'
                });
                fargateService.taskDefinition.addToTaskRolePolicy(mskConsumerTopicPolicy);
            }
            if (props.msk.consumerGroups.length > 0) {
                const mskConsumerGroupPolicy = new aws_iam_1.PolicyStatement({
                    actions: [
                        'kafka-cluster:AlterGroup',
                        'kafka-cluster:DescribeGroup'
                    ],
                    effect: aws_iam_1.Effect.ALLOW,
                    resources: props.msk.consumerGroups.map(group => `${env.mskClusterArn.replace('cluster', 'group')}/${group}`),
                    sid: 'mskconsumergroups'
                });
                fargateService.taskDefinition.addToTaskRolePolicy(mskConsumerGroupPolicy);
            }
            if (props.msk.producerTopics.length > 0) {
                const mskProducerPolicy = new aws_iam_1.PolicyStatement({
                    actions: [
                        'kafka-cluster:DescribeTopic',
                        'kafka-cluster:WriteData',
                        'kafka-cluster:WriteDataIdempotently'
                    ],
                    effect: aws_iam_1.Effect.ALLOW,
                    resources: props.msk.producerTopics.map(topic => `${env.mskClusterArn.replace('cluster', 'topic')}/${topic}`),
                    sid: 'mskproducer'
                });
                fargateService.taskDefinition.addToTaskRolePolicy(mskProducerPolicy);
            }
        }
        const tables = (_l = (_k = props.dynamo) === null || _k === void 0 ? void 0 : _k.tableNames) !== null && _l !== void 0 ? _l : [];
        if (tables.length > 0) {
            const dynamoResources = [
                ...tables.map(table => aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'dynamodb',
                    resource: 'table',
                    resourceName: table
                })),
                ...tables.map(table => aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'dynamodb',
                    resource: 'table',
                    resourceName: `${table}/index/*`
                }))
            ];
            const dynamoPolicy = new aws_iam_1.PolicyStatement({
                actions: [
                    'dynamodb:BatchGetItem',
                    'dynamodb:BatchWriteItem',
                    'dynamodb:ConditionCheckItem',
                    'dynamodb:DeleteItem',
                    'dynamodb:DescribeTable',
                    'dynamodb:GetItem',
                    'dynamodb:PutItem',
                    'dynamodb:Query',
                    'dynamodb:Scan',
                    'dynamodb:UpdateItem'
                ],
                effect: aws_iam_1.Effect.ALLOW,
                resources: dynamoResources,
                sid: 'dynamo'
            });
            fargateService.taskDefinition.addToTaskRolePolicy(dynamoPolicy);
            if ((_m = props.dynamo) === null || _m === void 0 ? void 0 : _m.addKeysToTaskRole) {
                const dynamoKmsPolicy = new aws_iam_1.PolicyStatement({
                    actions: [
                        'kms:CreateGrant',
                        'kms:Decrypt',
                        'kms:DescribeKey',
                        'kms:Encrypt',
                        'kms:GenerateDataKey*',
                        'kms:ReEncrypt*'
                    ],
                    effect: aws_iam_1.Effect.ALLOW,
                    resources: tables.map(table => aws_ssm_1.StringParameter.valueForStringParameter(this, `/${props.identifier}${props.deploymentEnv}/${props.imageName}/DYNAMODB/${table}`)),
                    sid: 'dynamokms'
                });
                fargateService.taskDefinition.addToTaskRolePolicy(dynamoKmsPolicy);
            }
        }
        const secretPolicy = new aws_iam_1.PolicyStatement({
            actions: ['secretsmanager:GetSecretValue'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'secretsmanager',
                    resource: 'secret:',
                    resourceName: `${props.identifier}${props.deploymentEnv}/${props.imageName}/*`
                })],
            sid: 'secrets'
        });
        fargateService.taskDefinition.addToExecutionRolePolicy(secretPolicy);
        fargateService.taskDefinition.addToTaskRolePolicy(secretPolicy);
        const secrets = (_p = (_o = props.taskSecrets) === null || _o === void 0 ? void 0 : _o.externalSecretConfig) !== null && _p !== void 0 ? _p : [];
        if (secrets.length > 0 && ((_q = props.taskSecrets) === null || _q === void 0 ? void 0 : _q.addKeysToTaskRole)) {
            const secretsKmsPolicy = new aws_iam_1.PolicyStatement({
                actions: [
                    'kms:CreateGrant',
                    'kms:Decrypt',
                    'kms:DescribeKey',
                    'kms:Encrypt',
                    'kms:GenerateDataKey*',
                    'kms:ReEncrypt*'
                ],
                effect: aws_iam_1.Effect.ALLOW,
                resources: secrets.map(secret => aws_ssm_1.StringParameter.valueForStringParameter(this, `/${props.identifier}${props.deploymentEnv}/${props.imageName}/EXTERNAL/${secret.lastPartOfSecretName}`)),
                sid: 'externalsecretskms'
            });
            fargateService.taskDefinition.addToExecutionRolePolicy(secretsKmsPolicy);
            fargateService.taskDefinition.addToTaskRolePolicy(secretsKmsPolicy);
        }
        const ssmParamPolicy = new aws_iam_1.PolicyStatement({
            actions: ['ssm:GetParameter', 'ssm:GetParameters'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'ssm',
                    resource: 'parameter',
                    resourceName: `${props.identifier}${props.deploymentEnv}/${props.imageName}/*`
                })],
            sid: 'ssmparams'
        });
        fargateService.taskDefinition.addToExecutionRolePolicy(ssmParamPolicy);
        fargateService.taskDefinition.addToTaskRolePolicy(ssmParamPolicy);
        const keyPolicy = new aws_iam_1.PolicyStatement({
            actions: ['kms:Decrypt'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [serviceKmsKey.key.keyArn],
            sid: 'fargatekey'
        });
        fargateService.taskDefinition.addToExecutionRolePolicy(keyPolicy);
        fargateService.taskDefinition.addToTaskRolePolicy(keyPolicy);
        this._service = fargateService;
    }
    get service() {
        return this._service;
    }
    get kmsKey() {
        return this._kmsKey;
    }
}
exports.CommonServiceDef = CommonServiceDef;
//# sourceMappingURL=data:application/json;base64,