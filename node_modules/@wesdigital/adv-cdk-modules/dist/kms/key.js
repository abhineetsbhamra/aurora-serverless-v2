"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardKMSKey = void 0;
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const constructs_1 = require("constructs");
const wesdigital_1 = require("../wesdigital");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
class StandardKMSKey extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this._props = {
            identifier: '',
            ...props
        };
        const kmsPolicy = new aws_iam_1.PolicyDocument({
            statements: [
                new aws_iam_1.PolicyStatement({
                    sid: 'Enable IAM Policies',
                    actions: [
                        'kms:*'
                    ],
                    principals: [new aws_iam_1.AccountRootPrincipal()],
                    resources: ['*']
                }),
                new aws_iam_1.PolicyStatement({
                    sid: 'Deny ScheduleKeyDeletion for all principals except github cross account roles and root account',
                    effect: aws_iam_1.Effect.DENY,
                    actions: [
                        'kms:ScheduleKeyDeletion'
                    ],
                    notPrincipals: [new aws_iam_1.AccountRootPrincipal()],
                    resources: ['*'],
                    conditions: {
                        ArnNotEquals: {
                            'aws:PrincipalArn': (0, wesdigital_1.deployerRoleArns)(this)
                        }
                    }
                }),
                new aws_iam_1.PolicyStatement({
                    sid: 'Allow github cross account roles specific kms permissions',
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: [
                        'kms:UpdateAlias',
                        'kms:UntagResource',
                        'kms:TagResource',
                        'kms:ScheduleKeyDeletion',
                        'kms:RevokeGrant',
                        'kms:RetireGrant',
                        'kms:ReEncrypt*',
                        'kms:PutKeyPolicy',
                        'kms:ListResourceTags',
                        'kms:ListGrants',
                        'kms:ListAliases',
                        'kms:GetKeyRotationStatus',
                        'kms:GetKeyPolicy',
                        'kms:GenerateDataKey',
                        'kms:Encrypt',
                        'kms:EnableKeyRotation',
                        'kms:DescribeKey',
                        'kms:DeleteAlias',
                        'kms:Decrypt',
                        'kms:CreateKey',
                        'kms:CreateGrant',
                        'kms:CreateAlias'
                    ],
                    principals: [new aws_iam_1.AnyPrincipal()],
                    resources: ['*'],
                    conditions: {
                        ArnEquals: {
                            'aws:PrincipalArn': (0, wesdigital_1.deployerRoleArns)(this)
                        }
                    }
                })
            ]
        });
        this._key = new aws_kms_1.Key(this, 'KMSKey', {
            keySpec: aws_kms_1.KeySpec.SYMMETRIC_DEFAULT,
            keyUsage: aws_kms_1.KeyUsage.ENCRYPT_DECRYPT,
            alias: `${this._props.identifier}${props.deploymentEnv}-${props.keyName}`,
            policy: kmsPolicy
        });
    }
    get key() {
        return this._key;
    }
    addDynamoDBFor(principal, target) {
        this._key.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            sid: 'Allow DynamoDB access to read/write to table',
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'kms:Encrypt',
                'kms:Decrypt',
                'kms:ReEncrypt*',
                'kms:GenerateDataKey*',
                'kms:DescribeKey',
                'kms:CreateGrant'
            ],
            principals: [principal],
            resources: ['*'],
            conditions: {
                StringLike: {
                    'kms:ViaService': 'dynamodb.*.amazonaws.com'
                }
            }
        }));
        if (target) {
            new aws_ssm_1.StringParameter(this, 'DynamoSSMParam', {
                parameterName: `/${this._props.identifier}${this._props.deploymentEnv}/${target.serviceName}/DYNAMODB/${target.targetName}`,
                stringValue: this._key.keyArn
            });
        }
    }
    addSecretsManagerFor(principal) {
        this._key.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            sid: 'Allow Secrets Manager access to use a secret',
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'kms:Decrypt',
                'kms:ReEncrypt*',
                'kms:GenerateDataKey*',
                'kms:DescribeKey',
                'kms:CreateGrant'
            ],
            principals: [principal],
            resources: ['*'],
            conditions: {
                StringLike: {
                    'kms:ViaService': 'secretsmanager.*.amazonaws.com'
                }
            }
        }));
    }
    addCloudwatchLogs(logGroupNames) {
        this._key.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            sid: 'AllowCloudWatchLogs',
            effect: aws_iam_1.Effect.ALLOW,
            actions: [
                'kms:Encrypt*',
                'kms:Decrypt*',
                'kms:Describe*',
                'kms:GenerateDataKey*',
                'kms:ReEncrypt*'
            ],
            principals: [new aws_iam_1.ServicePrincipal('logs.ap-southeast-2.amazonaws.com')],
            resources: ['*'],
            conditions: {
                ArnEquals: {
                    'kms:EncryptionContext:aws:logs:arn': logGroupNames.map(name => aws_cdk_lib_1.Stack.of(this).formatArn({
                        service: 'logs',
                        resource: `log-group:${name}`
                    }))
                }
            }
        }));
    }
}
exports.StandardKMSKey = StandardKMSKey;
//# sourceMappingURL=data:application/json;base64,