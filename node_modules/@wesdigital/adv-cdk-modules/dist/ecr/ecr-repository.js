"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECRRepository = void 0;
const constructs_1 = require("constructs");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
class ECRRepository extends constructs_1.Construct {
    constructor(scope, id, props) {
        var _a, _b, _c, _d, _e;
        super(scope, id);
        const ecrProps = props;
        const identifier = (_a = ecrProps.identifier) !== null && _a !== void 0 ? _a : '';
        const imageName = ecrProps.imageName;
        const kmsKey = ecrProps.kmsKey || 'alias/ecr';
        // TODO: extract this list to a common point if it's reused in other modules
        const accountIdList = (_b = ecrProps.accountIdList) !== null && _b !== void 0 ? _b : [
            '765018113112',
            '317585435641',
            '388942822076',
            '348279902832',
            '379399533759',
            '554417847584',
            '672557458966',
            '345954686127' // cicdtooling
        ];
        const protectedTags = (_c = ecrProps.protectedTags) !== null && _c !== void 0 ? _c : ['Prod'];
        const maxImageCount = (_d = ecrProps.maxImageCount) !== null && _d !== void 0 ? _d : 500;
        for (const key in ecrProps.tags) {
            aws_cdk_lib_1.Tags.of(this)
                .add(key, ecrProps.tags[key]);
        }
        const protectedTagRules = protectedTags.map((tagPrefix, i) => {
            return {
                description: `Protects images tagged with ${tagPrefix}`,
                rulePriority: i + 1,
                tagPrefixList: [tagPrefix],
                tagStatus: aws_ecr_1.TagStatus.TAGGED,
                maxImageCount: 999999
            };
        });
        const removeOldImageRule = {
            description: `Rotate images when reach ${maxImageCount} images stored`,
            rulePriority: protectedTagRules.length + 2,
            tagStatus: aws_ecr_1.TagStatus.ANY,
            maxImageCount: maxImageCount
        };
        const untaggedImageRule = {
            description: 'Remove untagged images',
            rulePriority: protectedTagRules.length + 1,
            maxImageCount: 1,
            tagStatus: aws_ecr_1.TagStatus.UNTAGGED
        };
        const repo = new aws_ecr_1.Repository(this, 'Repository', {
            imageScanOnPush: true,
            imageTagMutability: aws_ecr_1.TagMutability.MUTABLE,
            lifecycleRules: [...protectedTagRules, removeOldImageRule, untaggedImageRule],
            repositoryName: `${identifier}${imageName}`
        });
        const resourcePolicies = [
            {
                sid: 'pullFromRepo',
                actions: [
                    'ecr:BatchCheckLayerAvailability',
                    'ecr:BatchGetImage',
                    'ecr:DescribeImages',
                    'ecr:GetDownloadUrlForLayer'
                ],
                effect: aws_iam_1.Effect.ALLOW,
                principals: accountIdList.map(id => new aws_iam_1.AccountPrincipal(id))
            },
            {
                sid: 'LambdaECRImageCrossAccountRetrievalPolicy',
                actions: [
                    'ecr:BatchGetImage',
                    'ecr:GetDownloadUrlForLayer'
                ],
                effect: aws_iam_1.Effect.ALLOW,
                principals: [new aws_iam_1.ServicePrincipal('lambda.amazonaws.com')],
                conditions: {
                    StringLike: {
                        'aws:sourceArn': accountIdList.map(id => `"arn:aws:lambda:ap-southeast-2:${id}:function:*"`)
                    }
                }
            },
            {
                sid: 'deployToRepo',
                actions: [
                    'ecr:BatchCheckLayerAvailability',
                    'ecr:CompleteLayerUpload',
                    'ecr:InitiateLayerUpload',
                    'ecr:ListImages',
                    'ecr:PutImage',
                    'ecr:UploadLayerPart'
                ],
                effect: aws_iam_1.Effect.ALLOW,
                principals: [new aws_iam_1.AccountPrincipal(aws_cdk_lib_1.Stack.of(this).account)]
            }
        ];
        resourcePolicies.forEach(policy => repo.addToResourcePolicy(new aws_iam_1.PolicyStatement(policy)));
        const cfnRepo = (_e = repo.node) === null || _e === void 0 ? void 0 : _e.defaultChild;
        cfnRepo.encryptionConfiguration = {
            encryptionType: 'KMS',
            kmsKey
        };
        this.repository = repo;
    }
}
exports.ECRRepository = ECRRepository;
//# sourceMappingURL=data:application/json;base64,