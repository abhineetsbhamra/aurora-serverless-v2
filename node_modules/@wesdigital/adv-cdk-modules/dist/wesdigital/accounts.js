"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployerRoleArns = exports.lambdaDatadogApiKeySecretArn = exports.datadogLambdaName = exports.accountResourcePrefix = exports.wesDigitalEnv = exports.publicHostedZone = exports.wesDigitalVpc = exports.AvailabilityZones = exports.RegionAbbreviation = exports.AwsAccounts = exports.DatadogImageTag = exports.DatadogImage = exports.DeploymentRegion = exports.WesdigitalAccount = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_route53_1 = require("aws-cdk-lib/aws-route53");
var WesdigitalAccount;
(function (WesdigitalAccount) {
    // eslint-disable-next-line no-unused-vars
    WesdigitalAccount["AdvantagePlatformSandpit"] = "765018113112";
    // eslint-disable-next-line no-unused-vars
    WesdigitalAccount["AdvantageAppSandpit"] = "317585435641";
    // eslint-disable-next-line no-unused-vars
    WesdigitalAccount["AdvantageAppNonProd"] = "348279902832";
    // eslint-disable-next-line no-unused-vars
    WesdigitalAccount["AdvantageAppProd"] = "554417847584";
    // eslint-disable-next-line no-unused-vars
    WesdigitalAccount["CICDTooling"] = "345954686127";
})(WesdigitalAccount = exports.WesdigitalAccount || (exports.WesdigitalAccount = {}));
exports.DeploymentRegion = 'ap-southeast-2';
exports.DatadogImage = 'datadog-agent';
exports.DatadogImageTag = '7';
exports.AwsAccounts = new Map([
    [
        WesdigitalAccount.AdvantagePlatformSandpit,
        {
            envConfigs: new Map([
                [
                    'dev',
                    {
                        ecrAccount: WesdigitalAccount.CICDTooling,
                        internalLb: 'platform.internal.advpltfrm-sp.wesdigital.com.au',
                        privateSubnetIds: ['subnet-0fd990d9f59dc5f6f', 'subnet-053965b47d6971256', 'subnet-0120b8fccb24ab30c'],
                        vpcId: 'vpc-081f32b1e62eb3b9f',
                        mskClusterArn: 'arn:aws:kafka:ap-southeast-2:765018113112:cluster/adv-msk-dev/83676320-6db0-490a-bb8f-da4ac5fc5914-2',
                        mskClusterName: 'adv-msk-dev',
                        lambdaDatadogApiKeySecretArn: 'arn:aws:secretsmanager:ap-southeast-2:765018113112:secret:/dev/platform/datadog_lambda-uC5k3n',
                        publicHostedZoneAttrs: {
                            hostedZoneId: 'Z0318864Z94P954L5ZH8',
                            zoneName: 'platform.onepass.com.au'
                        }
                    }
                ]
            ]),
            resourcePrefix: 'advantage-platform-sandpit'
        }
    ],
    [
        WesdigitalAccount.AdvantageAppSandpit,
        {
            envConfigs: new Map([
                [
                    'dev',
                    {
                        ecrAccount: WesdigitalAccount.CICDTooling,
                        internalLb: 'internal.dev.onepass.com.au',
                        privateSubnetIds: ['subnet-02a0efb50ec7e1dde', 'subnet-09079df43da1626f0', 'subnet-0ec97ec0250420617'],
                        vpcId: 'vpc-02f67ef89d3e6e002',
                        mskClusterArn: 'arn:aws:kafka:ap-southeast-2:317585435641:cluster/adv-msk-dev/0dbbbca3-19d4-410f-b580-a1b95ce11c53-2',
                        mskClusterName: 'adv-msk-dev',
                        lambdaDatadogApiKeySecretArn: 'arn:aws:secretsmanager:ap-southeast-2:317585435641:secret:/dev/platform/datadog_lambda-kUxLWu',
                        publicHostedZoneAttrs: {
                            hostedZoneId: 'Z0225803376F1OMLW5SSO',
                            zoneName: 'dev.onepass.com.au'
                        },
                        benefits: {
                            eventBusName: 'dev-benefits'
                        }
                    }
                ]
            ]),
            resourcePrefix: 'advantage-app-sandpit'
        }
    ],
    [
        WesdigitalAccount.AdvantageAppNonProd,
        {
            envConfigs: new Map([
                [
                    'test',
                    {
                        ecrAccount: WesdigitalAccount.CICDTooling,
                        internalLb: 'internal.test.onepass.com.au',
                        privateSubnetIds: ['subnet-0e07fcaf58970e908', 'subnet-0d03d8d4764cb2567', 'subnet-07f2c8adb6b229814'],
                        vpcId: 'vpc-03b87594ddc2c6fea',
                        mskClusterArn: 'arn:aws:kafka:ap-southeast-2:348279902832:cluster/adv-msk-test/ba6f57d8-4422-469c-9fcf-11ac5b9fca9c-2',
                        mskClusterName: 'adv-msk-test',
                        lambdaDatadogApiKeySecretArn: 'arn:aws:secretsmanager:ap-southeast-2:348279902832:secret:/test/platform/datadog_lambda-zAGK1p',
                        publicHostedZoneAttrs: {
                            hostedZoneId: 'Z0592373125Y5H3VS5GSN',
                            zoneName: 'test.onepass.com.au'
                        },
                        benefits: {
                            eventBusName: 'test-benefits'
                        }
                    }
                ],
                [
                    'sit',
                    {
                        ecrAccount: WesdigitalAccount.CICDTooling,
                        internalLb: 'internal.sit.onepass.com.au',
                        privateSubnetIds: ['subnet-0e07fcaf58970e908', 'subnet-0d03d8d4764cb2567', 'subnet-07f2c8adb6b229814'],
                        vpcId: 'vpc-03b87594ddc2c6fea',
                        mskClusterArn: 'arn:aws:kafka:ap-southeast-2:348279902832:cluster/adv-msk-sit/a33d3245-1480-4f88-bd2f-592a437c8a52-2',
                        mskClusterName: 'adv-msk-sit',
                        lambdaDatadogApiKeySecretArn: 'arn:aws:secretsmanager:ap-southeast-2:348279902832:secret:/sit/platform/datadog_lambda-aJU69K',
                        publicHostedZoneAttrs: {
                            hostedZoneId: 'Z05914803KXTQOVTXYEE5',
                            zoneName: 'sit.onepass.com.au'
                        },
                        benefits: {
                            eventBusName: 'sit-benefits'
                        }
                    }
                ]
            ]),
            resourcePrefix: 'advantage-app-nonprod'
        }
    ],
    [
        WesdigitalAccount.AdvantageAppProd,
        {
            envConfigs: new Map([
                [
                    'prod',
                    {
                        ecrAccount: WesdigitalAccount.CICDTooling,
                        internalLb: 'internal.onepass.com.au',
                        privateSubnetIds: ['subnet-07aa0df7dbba041f1', 'subnet-0321de13bcc87a714', 'subnet-0f5f69f728b5bc932'],
                        vpcId: 'vpc-08401dd69c3f2b410',
                        mskClusterArn: 'arn:aws:kafka:ap-southeast-2:554417847584:cluster/adv-msk-prod/bc284581-7e09-45f1-9f82-c725834799f7-2',
                        mskClusterName: 'adv-msk-prod',
                        lambdaDatadogApiKeySecretArn: 'arn:aws:secretsmanager:ap-southeast-2:554417847584:secret:/prod/platform/datadog_lambda-S0v5Ri',
                        publicHostedZoneAttrs: {
                            hostedZoneId: 'Z014106223ORU48WQ3Y21',
                            zoneName: 'onepass.com.au'
                        },
                        benefits: {
                            eventBusName: 'prod-benefits'
                        }
                    }
                ]
            ]),
            resourcePrefix: 'advantage-app-prod'
        }
    ]
]);
exports.RegionAbbreviation = {
    'ap-southeast-2': 'apse2'
};
exports.AvailabilityZones = {
    'ap-southeast-2': ['ap-southeast-2a', 'ap-southeast-2b', 'ap-southeast-2c']
};
const wesDigitalVpc = (scope, id, props) => {
    const env = (0, exports.wesDigitalEnv)(props);
    return aws_ec2_1.Vpc.fromVpcAttributes(scope, id, {
        vpcId: env.vpcId,
        availabilityZones: exports.AvailabilityZones[exports.DeploymentRegion],
        privateSubnetIds: env.privateSubnetIds
    });
};
exports.wesDigitalVpc = wesDigitalVpc;
const publicHostedZone = (scope, id, props) => {
    const env = (0, exports.wesDigitalEnv)(props);
    return aws_route53_1.HostedZone.fromHostedZoneAttributes(scope, id, env.publicHostedZoneAttrs);
};
exports.publicHostedZone = publicHostedZone;
const wesDigitalEnv = (props) => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return exports.AwsAccounts.get(props.account).envConfigs.get(props.env);
};
exports.wesDigitalEnv = wesDigitalEnv;
const accountResourcePrefix = (accountNumber) => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return exports.AwsAccounts.get(accountNumber).resourcePrefix;
};
exports.accountResourcePrefix = accountResourcePrefix;
const datadogLambdaName = (accountNumber) => {
    return `${(0, exports.accountResourcePrefix)(accountNumber)}-${exports.RegionAbbreviation[exports.DeploymentRegion]}-datadog-forwarder`;
};
exports.datadogLambdaName = datadogLambdaName;
const lambdaDatadogApiKeySecretArn = (props) => {
    return exports.AwsAccounts.get(props.account).envConfigs.get(props.env).lambdaDatadogApiKeySecretArn;
};
exports.lambdaDatadogApiKeySecretArn = lambdaDatadogApiKeySecretArn;
const deployerRoleArns = (scope) => {
    const account = aws_cdk_lib_1.Stack.of(scope).account;
    return [
        `arn:aws:iam::${account}:role/data-crossaccount-deployer`,
        `arn:aws:iam::${account}:role/application-crossaccount-deployer`,
        `arn:aws:iam::${account}:role/data-infrastructure-crossaccount-deployer`,
        `arn:aws:iam::${account}:role/infra-crossaccount-deployer`
    ];
};
exports.deployerRoleArns = deployerRoleArns;
//# sourceMappingURL=data:application/json;base64,