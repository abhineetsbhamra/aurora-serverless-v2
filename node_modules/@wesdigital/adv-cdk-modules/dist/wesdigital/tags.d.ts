import { DeploymentEnv } from './accounts';
import { IConstruct } from 'constructs';
import { IAspect, Stack } from 'aws-cdk-lib';
declare type OptionalStringMap = {
    [key: string]: string | undefined;
};
export declare function addTags(construct: IConstruct, tags: OptionalStringMap): void;
/**
 * Configured as per https://wesdigital.atlassian.net/wiki/spaces/SCE/pages/150307221/AWS+Infrastructure+Tags
 * @param service defaults to `undefined`, which will omit the field
 * @param gitSource defaults to the `GITHUB_REPOSITORY` environment variable, and appended by the `stack.filename` if available
 * */
export interface InfraTagsConfig {
    env: DeploymentEnv;
    name: string;
    createdBy: string;
    domain: string;
    service?: string;
    gitSource?: string;
}
/**
 * @deprecated use {@link AddInfraTags} Aspect instead
 *  */
export declare function addStackTags(stack: Stack, config: InfraTagsConfig): void;
export declare function addInfraTags(stack: Stack, construct: IConstruct, config: InfraTagsConfig): void;
/**
 * Aspect to add platform mandated tags
 *  - If applying to a stack, use `Aspects.of(stack).add(new AddInfraTags({ ...config... })`
 *  - If applying to a stage, use `Aspects.of(this).add(new AddInfraTags({ ...config... })` from within the Stage constructor
 * If you have multiple Stacks in the same repository, it is recommended to expose a `public filename = __filename`. This will be automatically appended to the `GITHUB_REPOSITORY`, to clarify your `git-source` tag
 */
export declare class AddInfraTags implements IAspect {
    config: Omit<InfraTagsConfig, 'name'>;
    extraTags: OptionalStringMap;
    constructor(config: Omit<InfraTagsConfig, 'name'>, extraTags?: OptionalStringMap);
    visit(node: IConstruct): void;
    resolveNodeName(node: IConstruct): string;
}
export {};
