"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddInfraTags = exports.addInfraTags = exports.addStackTags = exports.addTags = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdkRoot = 'cdk/';
function addTags(construct, tags) {
    const tagsObj = aws_cdk_lib_1.Tags.of(construct);
    Object
        .entries(tags)
        .filter(([_, val]) => Boolean(val))
        .forEach(([key, val]) => {
        tagsObj.add(key, val);
    });
}
exports.addTags = addTags;
/**
 * @deprecated use {@link AddInfraTags} Aspect instead
 *  */
function addStackTags(stack, config) {
    addInfraTags(stack, stack, config);
}
exports.addStackTags = addStackTags;
function addInfraTags(stack, construct, config) {
    const tags = resolveInfraTags(stack, config);
    if (!aws_cdk_lib_1.TagManager.isTaggable(construct)) {
        throw new Error(`Cannot tag construct ${construct.node.path}`);
    }
    addTags(construct, tags);
}
exports.addInfraTags = addInfraTags;
function resolveInfraTags(stack, config) {
    let gitSource;
    if (config.gitSource) {
        gitSource = config.gitSource;
    }
    else if (process.env.GITHUB_REPOSITORY) {
        if (stack.filename) {
            gitSource = `${process.env.GITHUB_REPOSITORY}/${stack.filename.slice(stack.filename.indexOf(cdkRoot))}`;
        }
        else {
            gitSource = process.env.GITHUB_REPOSITORY;
        }
    }
    else {
        gitSource = 'no-repository-found'; // Default, for running `cdk synth` locally
    }
    return {
        env: config.env,
        service: config.service || undefined,
        'git-source': gitSource,
        'business-unit': 'advantage',
        'created-by': config.createdBy,
        domain: config.domain,
        Name: config.name,
        stackname: stack.stackName
    };
}
/* Adds tags for the AddInfraTags aspect
 */
function addAspectTags(taggable, tags) {
    Object
        .entries(tags)
        .filter(([_, val]) => Boolean(val))
        .forEach(([key, val]) => {
        taggable.tags.setTag(key, val);
    });
}
/**
 * Aspect to add platform mandated tags
 *  - If applying to a stack, use `Aspects.of(stack).add(new AddInfraTags({ ...config... })`
 *  - If applying to a stage, use `Aspects.of(this).add(new AddInfraTags({ ...config... })` from within the Stage constructor
 * If you have multiple Stacks in the same repository, it is recommended to expose a `public filename = __filename`. This will be automatically appended to the `GITHUB_REPOSITORY`, to clarify your `git-source` tag
 */
class AddInfraTags {
    constructor(config, extraTags) {
        this.config = config;
        this.extraTags = extraTags !== null && extraTags !== void 0 ? extraTags : {};
    }
    visit(node) {
        if (aws_cdk_lib_1.TagManager.isTaggable(node)) {
            const name = this.resolveNodeName(node);
            const stack = node.node.scopes.reverse().find(c => aws_cdk_lib_1.Stack.isStack(c));
            if (!stack) {
                aws_cdk_lib_1.Annotations.of(node).addError(`Could not resolve stack for node ${node.node.path}`);
                return;
            }
            const infraTags = resolveInfraTags(stack, {
                ...this.config,
                name
            });
            addAspectTags(node, { ...infraTags, ...this.extraTags });
        }
    }
    resolveNodeName(node) {
        if (node.node.scope && !aws_cdk_lib_1.Stack.isStack(node.node.scope)) {
            // Taggable is typically on the Resource underneath a L2 Construct, so go up 1 if possible.
            return node.node.scope.node.id;
        }
        return node.node.id;
    }
}
exports.AddInfraTags = AddInfraTags;
//# sourceMappingURL=data:application/json;base64,